- hosts: localhost
  gather_facts: False

  collections:
    - amazon.aws
    - community.aws
    - community.general

  vars_files:
    - vars/main.yml

  module_defaults:
    group/aws:
      region: '{{ aws_region }}'
      aws_profile: "ansible"

  tasks:
    - name: load config
      tags: always
      include_vars:
        file: config.yml

    - name: check config
      tags: always
      assert:
        that: 'test_account_id != lambda_account_id'

    - name: get aws account facts
      tags: always
      aws_caller_info:
      register: caller_info

    - set_fact:
        aws_account_id: "{{ caller_info.account }}"

    - name: show configuration
      tags: always
      debug: msg="aws_region={{ aws_region }}, stage={{ stage }}, aws_account_id={{ aws_account_id }}"

    - name: verify aws_account_id matches lambda_account_id
      tags: always
      assert:
        that: "aws_account_id == lambda_account_id"

    - name: create iam role for terminator functions
      tags: iam
      iam_role:
        name: "{{ iam_role_name }}"
        description: "iam role for terminator functions"
        state: present
        assume_role_policy_document:
          Version: "2012-10-17"
          Statement:
            Action: "sts:AssumeRole"
            Principal:
              Service: "lambda.amazonaws.com"
            Effect: "Allow"

    - name: create iam policy for terminator functions
      tags: iam
      iam_policy:
        iam_type: role
        iam_name: "{{ iam_role_name }}"
        policy_name: "{{ iam_policy_name }}"
        state: present
        policy_json: "{{ terminator_policy | to_nice_json }}"

    - name: Remove existing virtual environment directory
      file:
        state: absent
        path: "{{ packaging_dir }}/terminator-requirements"
      ignore_errors: true

    - name: create virtualenv with terminator requirements
      tags: lambda
      pip:
        requirements: "{{ virtualenv_requirement_file }}"
        virtualenv: "{{ packaging_dir }}/terminator-requirements/python"
        virtualenv_python: "{{ lambda_python_version }}"

    - name: package terminator requirements
      tags: lambda
      mattclay.aws.lambda_package:
        src: "{{ packaging_dir }}/terminator-requirements"
        dest: "{{ packaging_dir }}/terminator-requirements.zip"
        include:
          - "{{ packaging_dir }}/terminator-requirements/python/lib/{{ lambda_python_version }}/site-packages/*"
        exclude:
          # pre-compiled bytecode
          - "*.pyc"
          # packaging information not needed at runtime
          - "*.dist-info/*"
          # only used for botocore documentation generation
          - "{{ packaging_dir }}/terminator-requirements/python/lib/{{ lambda_python_version }}/site-packages/docutils/*"
          # installed during creation of the virtualenv
          - "{{ packaging_dir }}/terminator-requirements/python/lib/{{ lambda_python_version }}/site-packages/pip/*"
          - "{{ packaging_dir }}/terminator-requirements/python/lib/{{ lambda_python_version }}/site-packages/wheel/*"
          - "{{ packaging_dir }}/terminator-requirements/python/lib/{{ lambda_python_version }}/site-packages/setuptools/*"
          - "{{ packaging_dir }}/terminator-requirements/python/lib/{{ lambda_python_version }}/site-packages/pkg_resources/*"
          - "{{ packaging_dir }}/terminator-requirements/python/lib/{{ lambda_python_version }}/site-packages/easy_install.py"

    - name: publish terminator requirements layer
      tags: lambda
      mattclay.aws.lambda_layer:
        name: "{{ lambda_layer_name }}"
        description: "Python requirements for {{ lambda_function_name }}"
        compatible_runtimes:
          - "{{ lambda_python_version }}"
        path: "{{ packaging_dir }}/terminator-requirements.zip"
        license_info: GPL-3.0-only
        region: "{{ aws_region }}"
        state: present
      register: terminator_requirements_layer

    - set_fact:
        layer_version_arn: "{{ terminator_requirements_layer.layer.layer_version_arn }}"

    - name: create terminator package
      tags: lambda
      archive:
        format: zip
        dest: "{{ packaging_dir }}/terminator.zip"
        path: "{{ lambda_function_path }}"

    - name: deploy terminator package
      tags: lambda
      lambda:
        name: "{{ lambda_function_name }}"
        zip_file: "{{ packaging_dir }}/terminator.zip"
        runtime: "{{ lambda_python_version }}"
        timeout: 60
        handler: "{{ lambda_function_handler }}"
        memory_size: 128
        role: "{{ iam_role_name }}"
        environment_variables: "{{ lambda_function_env_variables }}"
        layers:
          - layer_version_arn: "{{ layer_version_arn }}"
      register: terminator_function

    - name: alias terminator functions
      tags: lambda
      lambda_alias:
        function_name: "{{ terminator_function.configuration.function_name }}"
        name: "{{ lambda_alias_name }}"
        description: "{{ lambda_alias_name }} alias"
        function_version: "{{ terminator_function.configuration.version | int }}"
      register: alias

    - name: schedule terminator event
      tags: schedule
      cloudwatchevent_rule:
        name: "{{ cloudwatch_event_rule_name }}"
        state: present
        schedule_expression: rate(5 minutes)
        targets:
          - id: "{{ rule_target_id }}"
            arn: "{{ alias.alias_arn }}"
      register: event_rule

    - name: schedule terminator event permissions
      tags: schedule
      lambda_policy:
        function_name: "{{ alias.alias_arn }}"
        statement_id: "{{ rule_target_id }}"
        action: "lambda:InvokeFunction"
        source_arn: "{{ event_rule.rule.arn }}"
        principal: "events.amazonaws.com"